service: NiPS-backend

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"  
      Resource: "arn:aws:s3:::nips-backend/*"
    - Effect: "Allow"
      Action:
        - "dynamodb:*"  
      Resource: "*" 
  environment:
    SECRET_KEY: ${env:SECRET_KEY}
    AWS_BUCKET_NAME: ${env:AWS_BUCKET_NAME}

custom:
  serverless-offline:
    httpPort: 4000

plugins:
  - serverless-dotenv-plugin
  - serverless-offline

functions:
  # Organizations
  createOrganization:
    handler: src/handlers/organization.createOrganizationHandler
    events:
      - http:
          path: organization
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createOrganizationAndUser:
    handler: src/handlers/organization.createOrganizationAndUserHandler
    events:
      - http:
          path: organizationAndUser
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getOrganizationById:
    handler: src/handlers/organization.getOrganizationHandler
    events:
      - http:
          path: organization/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getAllOrganizations:
    handler: src/handlers/organization.getOrganizationsHandler
    events:
      - http:
          path: organization
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateOrganization:
    handler: src/handlers/organization.updateOrganizationHandler
    events:
      - http:
          path: organization/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  # Users
  register:
    handler: src/handlers/authentication.registerHandler
    events:
      - http:
          path: register
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  authenticate:
    handler: src/handlers/authentication.authHandler
    events:
      - http:
          path: authenticate
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getAllUsers:
    handler: src/handlers/user.getAllUsersHandler
    events:
      - http:
          path: users
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getUserById:
    handler: src/handlers/user.getUserByIdHandler
    events:
      - http:
          path: users/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getUserByToken:
    handler: src/handlers/user.getUserByTokenHandler
    events:
      - http:
          path: users/me
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateUser:
    handler: src/handlers/user.updateUserHandler
    events:
      - http:
          path: users/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  # Folders
  getAllFolders:
    handler: src/handlers/folder.getAllFoldersHandler
    events:
      - http:
          path: folders
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getFolderById:
    handler: src/handlers/folder.getFolderByIdHandler
    events:
      - http:
          path: folders/{organization}/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createFolder:
    handler: src/handlers/folder.createFolderHandler
    events:
      - http:
          path: folders
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateFolder:
    handler: src/handlers/folder.updateFolderHandler
    events:
      - http:
          path: folders/{organization}/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  # Requirements
  getAllRequirements:
    handler: src/handlers/requirement.getAllRequirementsHandler
    events:
      - http:
          path: requirements
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getRequirementById:
    handler: src/handlers/requirement.getRequirementByIdHandler
    events:
      - http:
          path: requirements/{organization}/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  createRequirement:
    handler: src/handlers/requirement.createRequirementHandler
    events:
      - http:
          path: requirements
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateRequirement:
    handler: src/handlers/requirement.updateRequirementHandler
    events:
      - http:
          path: requirements/{organization}/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  # Files
  getAllFiles:
    handler: src/handlers/file.getAllFilesHandler
    events:
      - http:
          path: files
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  getFileById:
    handler: src/handlers/file.getFileByIdHandler
    events:
      - http:
          path: files/{folder}/{id}
          method: get
          cors:
              origin: '*'
              headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
              allowCredentials: false
  createFile:
    handler: src/handlers/file.createFileHandler
    events:
      - http:
          path: files
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  updateFile:
    handler: src/handlers/file.updateFileHandler
    events:
      - http:
          path: files/{folder}/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false
  s3UploadHandler:
    handler: src/handlers/s3Upload.s3UploadHandler
    events:
      - s3:
          bucket: nips-backend
          event: s3:ObjectCreated:*
      - http:
          path: files/upload
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: false